# Імпорт бібліотек для роботи
import pygame
import os

'''----------------------------------------&CHONKY_Enemie&{--------------------------------------------------'''
# Клас статичного ворога
class Chonky_enemie():
    # Властивості нашого об'єкту
    def __init__(self, x_enemie, y_enemie, width_enemie, height_enemie, damage_point, sprite_path, kd, hp):
        # ------------Записування властивостей статичного ворога в параметри екземпляра-------------------#
        self.x_enemie = x_enemie # Координати по Х
        self.y_enemie = y_enemie # Координати по Y
        self.width_enemie = width_enemie # Ширина об'єкту
        self.height_enemie = height_enemie # Висота об'єкту
        self.damage_point = damage_point # Число нанесення пошкодження герою за один удар
        self.Sprite_path = sprite_path # Шлях до директорії знаходження спрайту об'єкта
        self.kd = kd # Змінна лічильника, в якому рахується перерву між нанесенняй пошкоджень(таймер)
        self.img = None # Змінна в яку записується готовий спрайт(з зміненими розмірами)
        self.hp = hp # Очки здоров'я
        # -------------------------------------------------------------------------------------------------#

    '''#-------------------------------------/LOAD_IMAGES/{-----------------------------------------------#'''
    # Функція завантаження спрайтів для об'єкта та зміна розміра за розмірами ворога та змфнення формату зображення(рендер)
    def load_image(self):
        # Знаходження шляху до файлу
        self.img = os.path.abspath(__file__ + "/..")# 
        # Запис в змінну "img" шляху до спрайту
        self.img = self.img + self.Sprite_path
        # Завантаження та змінення формату зображення(рендер)
        self.img = pygame.image.load(self.img).convert_alpha()
        # Змінення розмірв зображення до розмірів об'єкта
        self.img = pygame.transform.scale(self.img, (self.width_enemie,self.height_enemie))# 

    # Функція показу спрайтів об'єкта на екрані
    def show_image(self, screen):# Приймає поверхню показу
        # Малює вихідний спрайт на переданій поверхні "screen"
        screen.blit(self.img, (self.x_enemie, self.y_enemie))
    '''#}-----------------------------------------------------------------------------------------------#'''

    '''#--------------------------------------------/DAMAGE/{---------------------------------------------#'''
    # функція нанесення пошкоджень головному герою
    def damage(self, mainchar):
        # Перевірка значення лічильника нанесення пошкоджень головному герою(таймер)
        if self.kd == 0:
        #-----Функція перевірки дотику до лівої сторони ворога, ворожого об'єкту-----#
            # Перевірка: "Якщо координата по Y-осі верхнього ребра головного героя менша за координату по Y-осі нижнього ребра ворога, то..."
            if mainchar.Y_sprite <= self.y_enemie + self.height_enemie:
                # Перевірка: "Якщо координата по Y-осі нижнього ребра головного героя більше за координату по Y-осі верхнього ребра ворога, то..."
                if mainchar.Y_sprite + mainchar.Height_sprite>= self.y_enemie:
                    # Перевірка: "Якщо координатна по X-осі лівого ребра головного героя менша за координату по X-осі правого ребра ворога, то..."
                    if mainchar.X_sprite <= self.x_enemie + self.width_enemie - 10:
                        # Перевірка: "Якщо координатна по X-осі правого ребра головного героя більша за координату по X-осі лівого ребра ворога, то..."
                        if mainchar.X_sprite + mainchar.Width_sprite >= self.x_enemie + 10:
                            # Нанесення пошкодження герою(тобто поінти здоров'я героя віднімаються)
                            mainchar.hp -= self.damage_point
                            # Онулення значення лічильника нанесення пошкоджень головному герою(таймер)
                            self.kd = 120

        #-----Функція перевірки дотику до правої сторони ворога, ворожого об'єкту-----#
            # Перевірка: "Якщо координата по Y-осі верхнього ребра головного героя менша за координату по Y-осі нижнього ребра ворога, то..."
            elif mainchar.Y_sprite <= self.y_enemie + self.height_enemie:
                # Перевірка: "Якщо координата по Y-осі нижнього ребра головного героя більше за координату по Y-осі верхнього ребра ворога, то..."
                if mainchar.Y_sprite + mainchar.Height_sprite >= self.y_enemie:
                    # Перевірка: "Якщо координатна по X-осі правого ребра головного героя більша за координату по X-осі лівого ребра ворога, то..."
                    if mainchar.X_sprite + mainchar.Width_sprite >= self.x_enemie:
                        # Перевірка: "Якщо координатна по X-осі лівого ребра головного героя менша за координату по X-осі правого ребра ворога, то..."
                        if mainchar.X_sprite <= self.x_enemie + self.width_enemie:
                            # Нанесення пошкодження герою(тобто поінти здоров'я героя віднімаються)
                            mainchar.hp -= self.damage_point
                            # Онулення значення лічильника нанесення пошкоджень головному герою(таймер)
                            self.kd = 120

        # Перевірка:"Якщо лічильник перерви на нанесення пошкодженнь головному герою(таймер) більше 0, то..."
        if self.kd > 0:
            # Рахунок лічильника(відіймання заданого значення, поки перевірка є дійсною)
            self.kd -= 1
        # Викликаємо функцію завантаження спрайтів    
        self.load_image()
    '''#}-----------------------------------------------------------------------------------------------#'''


'''}-----------------------------------------------------------------------------------------------------'''












'''----------------------------------------&Bullet_Enemie&{--------------------------------------------------'''
# Клас створення снаряда ворога
class Bullet_Enemie(Chonky_enemie):
    # Властивості нашого об'єкту
    def __init__(self, x_enemie, y_enemie, width_enemie, height_enemie, damage_point, sprite_path, kd, hp, speed):
        # Властивості, які ми беремо з наслідування попереднього класу
        super().__init__(x_enemie, y_enemie, width_enemie, height_enemie, damage_point, sprite_path, kd, hp)
        # -------------Записування властивостей статичного ворога в параметри екземпляра-------------------#
        self.speed = speed# Швидкість польоту снаряда
        self.start_x = x_enemie# Стартова точка шляху по X-осі
        self.start_y = y_enemie# Стартова точка шляху по X-осі
        self.end = 500# Максимальна відстань польоту
        # -------------------------------------------------------------------------------------------------#

    '''#-----------------------------------------/MOVE_BULLET/{-------------------------------------------#'''
    # Функція польоту снаряда ворога
    def move_bullet(self, screen, side):# Передаємо в функцію екран(screen), головного героя(mainchar), сторони погляду ворога(side)
        # Перевірка:"Якщо сторона погляду ворога є вправо, то..."
        if side == 'Right':
            # Снаряд здійснює польот в напрямку лівої сторони
            self.x_enemie -= self.speed
        # Перевірка:"Якщо сторона погляду ворога є ліво, то..."
        elif side == 'Left':
            # Снаряд здійснює польот в напрямку правої сторони
            self.x_enemie += self.speed
        # Перевірка:"Якщо сторона погляду ворога є вверх, то..."
        elif side == 'Top':
            # Снаряд здійснює польот вниз
            self.y_enemie += self.speed
        # Перевірка:"Якщо сторона погляду ворога є вниз, то..."
        elif side == 'Bottom':
            # Снаряд здійснює польот вверх
            self.y_enemie -= self.speed
        self.show_image(screen)# Викликаємо функцію для показу спрайтів об'єкта на екрані і передаємо в неї екран(screen) 
    '''#}----------------------------#-------------------------------------------------------------------#'''

    '''#--------------------------------------/DELETED_BULLET/{------------------------------------------#'''
    # Функція видалення снаряду
    def remove_bullet(self, list_level, bullet_list):# Приймає об'єкти, які знаходяться на мапі
        # Перевірка: "Якщо снаряд пролетів більше зазначеної відстанні в праву сторону, то..."
        if self.x_enemie >= self.start_x + self.end:
            bullet_list.remove(self)# Видалення снаряду
        # Перевірка: "Якщо снаряд пролетів більше зазначеної відстанні в ліву сторону, то..."
        if self.x_enemie <= self.start_x - self.end:
            bullet_list.remove(self)# Видалення снаряду
        # Перевірка: "Якщо снаряд пролетів більше зазначеної відстанні вниз, то..."
        if self.y_enemie >= self.start_y + self.end:
            bullet_list.remove(self)# Видалення снаряду
        # Перевірка: "Якщо снаряд пролетів більше зазначеної відстанні вверх, то..."
        if self.y_enemie <= self.start_y - self.end:
            bullet_list.remove(self)# Видалення снаряду

        # Циклічний перебір всіх блоків на мапі та запис їх до змінної(block)
        for block in list_level:
        #----------------------Перевірка дотику з правої сторони снаряду до інших об'єктів на мапі-------------------------------------------#
            # Перевірка: "Якщо координата по Y-осі верхнього ребра снаряду менша за координату по Y-осі нижнього ребра блока, то..."
            if self.y_enemie + 1 <= block.Y + block.HEIGHT:
                # Перевірка: "Якщо координата по Y-осі нижнього ребра снаряду більша за координату по Y-осі верхнього ребра блока, то..."
                if self.y_enemie + self.height_enemie - 1 >= block.Y:
                    # Перевірка: "Якщо координатна по X-осі лівого ребра снаряду менша за координату по X-осі правого ребра блока, то..."
                    if self.x_enemie <= block.X + block.WIDTH:
                        # Перевірка: "Якщо координатна по X-осі правого ребра снаряду більша за координату по X-осі лівого ребра блока, то..."
                        if self.x_enemie + self.width_enemie >= block.X:
                            # Видалення снаряду
                            bullet_list.remove(self)
                            
        #----------------------Перевірка дотику з лівої сторони снаряду до інших об'єктів на мапі-------------------------------------------#
            # Перевірка: "Якщо координаа по Y-осі верхнього ребра снаряду менша за координату по Y-осі нижнього ребра блока, то..."
            elif self.y_enemie + 1 <= block.Y + block.HEIGHT:
                # Перевірка: "Якщо координата по Y-осі нижнього ребра снаряду більша за координату по Y-осі верхнього ребра блока, то..."
                if self.y_enemie + self.height_enemie - 1 >= block.Y:
                    # Перевірка: "Якщо координатна по X-осі правого ребра снаряду більша за координату по X-осі лівого ребра блока, то..."
                    if self.x_enemie + self.width_enemie >= block.X:
                        # Перевірка: "Якщо координатна по X-осі лівого ребра снаряду менша за координату по X-осі правого ребра блока, то..."
                        if self.x_enemie <= block.X + block.WIDTH:
                            # Видалення снаряду
                            bullet_list.remove(self)

        #----------------------Перевірка дотику з верхнім ребром снаряду до інших об'єктів на мапі-------------------------------------------#
            # Перевірка: "Якщо координата по X-осі лівого ребра снаряду менша за координату по X-осі правого ребра блока, то..."
            elif self.x_enemie <= block.X + block.WIDTH:
                # Перевірка: "Якщо координатна по X-осі правого ребра снаряду більша за координату по X-осі лівого ребра блока, то..."
                if self.x_enemie + self.width_enemie >= block.X:
                    # Перевірка: "Якщо координата по Y-осі верхнього ребра снаряду менша за координату по Y-осі нижнього ребра блока, то..."
                    if self.y_enemie <= block.Y + block.HEIGHT: 
                        # Перевірка: "Якщо координата по Y-осі нижнього ребра снаряду більша за координату по Y-осі нижнього ребра блока, то..."
                        if self.y_enemie + self.height_enemie >= block.Y + block.HEIGHT:
                            # Видалення снаряду
                            bullet_list.remove(self)

        #----------------------Перевірка дотику з нижнім ребром снаряду до інших об'єктів на мапі-------------------------------------------#
            # Перевірка: "Якщо координата по X-осі лівого ребра снаряду менша за координату по X-осі правого ребра блока, то..."
            elif self.x_enemie <= block.X + block.WIDTH:
                # Перевірка: "Якщо координатна по X-осі правого ребра снаряду більша за координату по X-осі лівого ребра блока, то..."
                if self.x_enemie + self.width_enemie >= block.X:
                    # Перевірка: "Якщо координата по Y-осі нижнього ребра снаряду більша за координату по Y-осі верхнього ребра блока, то..."
                    if self.y_enemie + self.height_enemie >= block.Y:
                        # Перевірка: "Якщо координата по Y-осі нижнього ребра снаряду менша за координату по Y-осі верхнього ребра блока, то..."
                        if self.y_enemie + self.height_enemie <= block.Y:
                            # Видалення снаряду
                            bullet_list.remove(self)

    '''#}-----------------------------------------------------------------------------------------------#'''

'''}-----------------------------------------------------------------------------------------------------'''









'''-------------------------------------&STATIC_ENEMIES&{--------------------------------------------------'''
# Клас створення статичного ворога з датністю створення снаряду
class Static_Enemie(Bullet_Enemie):
    # Властивості нашого об'єкту
    def __init__(self, x_enemie, y_enemie, width_enemie, height_enemie, damage_point, sprite_path, kd, hp, speed,  position_side):
        # Властивості, які ми беремо з наслідування попереднього класу
        super().__init__(x_enemie, y_enemie, width_enemie, height_enemie, damage_point, sprite_path, kd, hp, speed)
        # -------------Записування властивостей статичного ворога в параметри екземпляра-------------------#
        self.position_side = position_side # Сторона прикріплення ворога до блока
        self.animcount = 36 # Лічильник номеру спрайту яке ділиться націло 
        self.bullet_list = [] # Список снарядів
        # -------------------------------------------------------------------------------------------------#

    '''#-----------------------------------------/CREATE_BULLET/{-------------------------------------------#'''
    # Функція створення снаряду
    def create_bullet(self, shoot_enemy):# Передаємо конкретного ворога, який повинен створити снаряд
        # Перевірка: "Якщо номер спрайту анімації 5, то..."
        if self.animcount//6 == 5:
                # Створємо об'єкт снаряду
                bullet = Bullet_Enemie(shoot_enemy.x_enemie+((shoot_enemy.width_enemie/2)-5),
                             shoot_enemy.y_enemie+((shoot_enemy.height_enemie/2)-5),
                            10, 10, shoot_enemy.damage_point, "/image/enemyshooting/enemyshootatack.png", 0, 5, 1)
                # Додаємо цей снаряд в список всіх снарядів
                self.bullet_list.append(bullet)
    '''#}-----------------------------------------------------------------------------------------------#'''

    '''#--------------------------------------/SHOOTING_BULLET/{----------------------------------------#'''
    # Функція анімації ворога для кожної сторони
    def animete_shoot(self, screen, mainchar, list_level):
        # Перевірка: "Якщо сторона знаходження ворога право та значення лічильника дорівнює нулю, то..."
        if self.position_side == 'Right' and self.kd == 0:
            # Зміна спрайта за допомогою лічильника спрайтів
            self.Sprite_path = "/image/enemyshooting/right/enemyshootright"+str((self.animcount//6))+".png"
            # Виклик фунції створення снаряду та передача ворога в якого він утвориться
            self.create_bullet(self)
            # Зміна значення лічильника анімації
            self.animcount -= 1
        # Перевірка: "Якщо сторона знаходження ворога ліво та значення лічильника дорівнює нулю, то..."
        elif self.position_side == 'Left' and self.kd == 0:
            # Зміна спрайта за допомогою лічильника спрайтів
            self.Sprite_path = "/image/enemyshooting/left/enemyshootleft"+str((self.animcount//6))+".png"
            # Виклик фунції створення снаряду та передача ворога в якого він утвориться
            self.create_bullet(self)
            # Зміна значення лічильника анімації
            self.animcount -= 1
        # Перевірка: "Якщо сторона знаходження ворога зверху та значення лічильника дорівнює нулю, то..."
        elif self.position_side == 'Top' and self.kd == 0:
            # Зміна спрайта за допомогою лічильника спрайтів
            self.Sprite_path = "/image/enemyshooting/up/enemyshootup"+str((self.animcount//6))+".png"
            # Виклик фунції створення снаряду та передача ворога в якого він утвориться
            self.create_bullet(self)
            # Зміна значення лічильника анімації
            self.animcount -= 1
        # Перевірка: "Якщо сторона знаходження ворога знизу та значення лічильника дорівнює нулю, то..."
        elif self.position_side == 'Bottom' and self.kd == 0:
            # Зміна спрайта за допомогою лічильника спрайтів
            self.Sprite_path = "/image/enemyshooting/bottom/enemyshootbot"+str((self.animcount//6))+".png"
            # Виклик фунції створення снаряду та передача ворога в якого він утвориться
            self.create_bullet(self)
            # Зміна значення лічильника анімації
            self.animcount -= 1
        # Перевірка: "Якщо значення лічильника менше або дорівнює 6, то..."
        if self.animcount <= 6:
            # Онулення значення лічильника анімації до 36
            self.animcount = 36
            # Онулення значення лічильника створення снаряду
            self.kd = 240  
        # Перевірка: "Якщо лічильник створення снаряду більше нуля, тою..."
        if self.kd > 0:
            # Рахунок до нуля лічинльника створення снаряду
            self.kd -= 1
        # Циклічний перебір снарядів в списку снарядів
        for bullet_ in self.bullet_list:
            # Викликаємо функцію завантаження спрайтів
            bullet_.load_image()
            # Викликаємо функцію нанесення пошкоджень головному герою(damage) і передаємо в неї гловного героя(mainchar) та снаряд(self)
            bullet_.damage(mainchar)
            # Виклик функції руху снаряда
            bullet_.move_bullet(screen, self.position_side)# Передача екрану, головного героя, сторону знаходження ворога
            # Виклик функції перевірки видалення снаряду
            bullet_.remove_bullet(list_level, self.bullet_list)# Передача списку об'єктів на мапі та списоку всіх снарядів
            
        # Викликаємо функцію завантаження спрайтів
        self.load_image()
    '''#}-----------------------------------------------------------------------------------------------#'''

'''}-----------------------------------------------------------------------------------------------------'''















'''--------------------------------------------&ENEMIES&{--------------------------------------------------'''
# Клас створення статичного ворога з датністю створення снаряду
class Enemie(Static_Enemie):
    # Властивості нашого об'єкту
    def __init__(self, x_enemie, y_enemie, width_enemie, height_enemie, damage_point, sprite_path, kd, hp, speed, position_side, move_distance, stop_timer):
        # Властивості, які ми беремо з наслідування попереднього класу
        super().__init__(x_enemie, y_enemie, width_enemie, height_enemie, damage_point, sprite_path, kd, hp, speed, position_side)

        # -------------Записування властивостей статичного ворога в параметри екземпляра-------------------#
        self.y_enemie = y_enemie - height_enemie
        self.speed_enemy = speed# Швидкість руху
        self.x_start = x_enemie# Початок руху
        self.x_finished = move_distance# Кінець руху
        self.move_side = True #False - вліво, True - вправо
        self.stop_timer = stop_timer# Лічильник паузи руху
        # -------------------------------------------------------------------------------------------------#

    '''#--------------------------------------/MOVE_ENEMIES/{---------------------------------------------#'''
    # Функція руху ворога
    def move(self):
        # Перевірка: "Якщо координати ворога по X-осі менші за кінцеву координату руху і напрямок руху вправо та таймер паузи 120, то..."
        if self.x_enemie <= self.x_start + self.x_finished and self.move_side == True and self.stop_timer >= 120:
            # Рух ворога вправо
            self.x_enemie += self.speed_enemy
            # Перевірка: "Якщо координати ворога по X-осі такі ж як і координати кінцевох точки, то..."
            if self.x_enemie == self.x_start + self.x_finished:
                # Онулення таймера паузи
                self.stop_timer = 0
                # Онулення лічильника спрайтів
                self.animcount = 0
                # Зміна напрямку руху вліво
                self.move_side = False
        # Перевірка: "Якщо координати ворога по X-осі більші чи дорівнюють кінцевій координаті руху і напрямок руху вліво та таймер паузи 120, то..."
        elif self.x_enemie >= self.x_start and self.move_side == False and self.stop_timer >= 120:
            # Рух ворога вілво
            self.x_enemie -= self.speed_enemy
            # Перевірка: "Якщо координати ворога по X-осі такі ж як і координати початкової точки, то..."
            if self.x_enemie == self.x_start:
                # Онулення таймера паузи
                self.stop_timer = 0
                # Онулення лічильника спрайтів
                self.animcount = 0
                # Зміна напрямку руху вправо
                self.move_side = True
        # В інших випадках
        else:
            # Збільшення таймера паузи
            self.stop_timer += 1
        # Перевірка: "Якщо лічильник анімації більше чи дорівнює 32, то..."
        if self.animcount >= 32:
            # Онулення лічильника спрайтів
            self.animcount = 0
        # Перевірка:"Якщо напрямлк руху ворога вліво та таймер паузи 120, то..."
        if self.move_side == False and self.stop_timer >= 120:
            # Змінення спрайтів ворога
            self.Sprite_path = "/image/enemiewalk/walkingdude"+str((self.animcount//8)+1)+".png"
            # Збільшення лічильника спрайтів
            self.animcount += 1
        # Перевірка:"Якщо напрямлк руху ворога вправо та таймер паузи 120, то..."
        elif self.move_side == True and self.stop_timer >= 120:
            # Змінення спрайтів ворога
            self.Sprite_path = "/image/enemiewalk/walkingdudel"+str((self.animcount//8)+1)+".png"
            # Збільшення лічильника спрайтів
            self.animcount += 1
        elif self.stop_timer == 0:
            if self.move_side == True:
                self.Sprite_path = "/image/enemiewalk/walkingdudel1.png"
            if self.move_side == False:
                self.Sprite_path = "/image/enemiewalk/walkingdude1.png"


    '''#}-----------------------------------------------------------------------------------------------#'''
'''}-----------------------------------------------------------------------------------------------------'''